generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Lucia Auth
model AuthUser {
  id              String        @id @unique
  auth_session    AuthSession[]
  auth_key        AuthKey[]
  discordUserId   String
  discordUsername String
  discordAvatar   String

  // Non-auth
  tweets    Tweet[]
  likes     Like[]
  followers AuthUser[] @relation(name: "Followers")
  follows   AuthUser[] @relation(name: "Followers")

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

// Tweets
model Tweet {
  id        String   @id @unique @default(cuid())
  userId    String
  content   String   @db.VarChar(240)
  createdAt DateTime @default(now())
  likes     Like[]

  user AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Like {
  tweetId String
  userId  String

  tweet Tweet    @relation(references: [id], fields: [tweetId], onDelete: Cascade)
  user  AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([tweetId, userId])
  @@index([userId])
  @@index([tweetId])
}
